/**
 * @module  cbox/pull
 * @description  Tools for pulling from a remote DB to a local directory.
 */

var Promise = require('bluebird');
var utils = require('../utils');
var winston = require('winston');
var Queue = require('promise-queue');
Queue.configure(Promise);

var nano = Promise.promisifyAll(require('nano'));
var fs = Promise.promisifyAll(require('fs'));

/**
 * Lists contents of a remote database.
 * @function
 * @param {String} remote_url URL to the remote database, including credentials.
 * @return {Promise} A promise that resolves to the remote DB's contents as JSON.
 */
function listRemote (remote_url) {
  // TODO
}

/**
 * Watch a remote database for changes.
 * @function
 * @param {String} remote_url URL to the remote database, including credentials.
 * @return {Stream} An active stream of changes from the remote DB.
 */
function watchRemote (remote_url) {
  // TODO
}

/**
 * @class
 * @param {Object} job Object describing which remote DB to watch, and which local directory to change.
 * @description Manages a task queue indicating files to change.
 */
function LocalWorker (job) {
  this.local = job.local;
  this.remote = job.remote;
  this.queue = new Queue()
}

/**
 * Update a local file from a remote version.
 * @function
 * @param {String} filepath A path to the file to modify.
 * @param {String} file Data for the updated file.
 * @return {Promise} A promise indicating whether the update succeeded.
 */
LocalWorker.prototype.update = function (file_id, file) {
  // TODO
}

/**
 * Create a local file from a remote version. Creates any folders necessary to completing the file's path.
 * @function
 * @param {String} filepath A path to the file to modify.
 * @param {String} file Data for the updated file.
 * @return {Promise} A promise indicating whether the update succeeded.
 */
LocalWorker.prototype.create = function (file_id, file) {
  // TODO
}

/**
 * Remove a local file based on a remote version.
 * @function
 * @param {String} filepath A path to the file to remove.
 * @param {String} file Data for the updated file.
 * @return {Promise} A promise indicating whether the removal succeeded.
 */
LocalWorker.prototype.remove = function (file_id, file) {
  // TODO
}

/**
 * Wraps a promise (such as from `listRemote`) so that the worker processes the result.
 * @param  {Promise} promise A promise that resolves to a list of files as reflected on the remote DB.
 * @return {Promise}         A promise that resolves when the worker has processed all tasks.
 */
LocalWorker.prototype.fromPromise = function (promise) {
  // TODO
}

/**
 * Wraps a feed (such as from `watchRemote`) so applicable events modify relevant local files.
 * @param  {Object} feed An event emitter.
 * @return {Object}      A modified event emitter that instead emits the promises generated by the worker in processing the feed.
 */
LocalWorker.prototype.fromFeed = function (feed) {
  // TODO
}

module.exports = {
  remote: {
    list: listRemote,
    watch: watchRemote
  },
  worker: LocalWorker
};
